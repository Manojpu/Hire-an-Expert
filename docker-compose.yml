version: "3.8"

services:
  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - PORT=8000
      - AUTH_SERVICE_URL=http://auth-service:8001
      - GIG_SERVICE_URL=http://gig-service:8002
      - BOOKING_SERVICE_URL=http://booking-service:8003
      - PAYMENT_SERVICE_URL=http://payment-service:8004
      - MESSAGE_SERVICE_URL=http://message-service:8005
      - USER_SERVICE_URL=http://user-service:8006
      - REVIEW_SERVICE_URL=http://review-service:8007
      - FRONTEND_URL=http://localhost:3000
    depends_on:
      - auth-service
      - gig-service
      - booking-service
      - payment-service
      - message-service
      - user-service
      - review-service
    networks:
      - microservices-network

  # Auth Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - PORT=8001
    volumes:
      - ./services/auth-service/serviceAccountKey.json:/app/serviceAccountKey.json
    networks:
      - microservices-network

  # Gig Service
  gig-service:
    build:
      context: ./services/gig-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - PORT=8002
      - DATABASE_URL=postgresql://postgres:password@gig-db:5432/gig_db
    depends_on:
      - gig-db
    networks:
      - microservices-network

  # Booking Service
  booking-service:
    build:
      context: ./services/booking-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    environment:
      - PORT=8003
      - DATABASE_URL=postgresql://postgres:password@booking-db:5432/booking_db
    depends_on:
      - booking-db
    networks:
      - microservices-network

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - PORT=8004
    networks:
      - microservices-network

  # Message Service
  message-service:
    build:
      context: ./services/msg-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    environment:
      - PORT=8005
      - MONGODB_URI=mongodb://message-db:27017/messages
    depends_on:
      - message-db
    networks:
      - microservices-network

  # User Service
  user-service:
    build:
      context: ./services/user-service-v2
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    environment:
      - PORT=8006
      - DATABASE_URL=postgresql://postgres:password@user-db:5432/user_service_db
    depends_on:
      - user-db
    networks:
      - microservices-network

  # Review Service
  review-service:
    build:
      context: ./services/review-service
      dockerfile: Dockerfile
    ports:
      - "8007:8007"
    environment:
      - PORT=8007
      - DATABASE_URL=postgresql://postgres:password@review-db:5432/review_db
    depends_on:
      - review-db
    networks:
      - microservices-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
      - NEXT_PUBLIC_SOCKET_URL=http://localhost:8000
    depends_on:
      - api-gateway
    networks:
      - microservices-network

  # Databases
  gig-db:
    image: postgres:15
    environment:
      - POSTGRES_DB=gig_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - gig_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  booking-db:
    image: postgres:15
    environment:
      - POSTGRES_DB=booking_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - booking_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  message-db:
    image: mongo:6
    environment:
      - MONGO_INITDB_DATABASE=messages
    volumes:
      - message_db_data:/data/db
    networks:
      - microservices-network

  user-db:
    image: postgres:15
    environment:
      - POSTGRES_DB=user_service_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - user_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  review-db:
    image: postgres:15
    environment:
      - POSTGRES_DB=review_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - review_db_data:/var/lib/postgresql/data
    networks:
      - microservices-network

  # Redis for caching (optional)
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network

volumes:
  gig_db_data:
  booking_db_data:
  message_db_data:
  user_db_data:
  review_db_data:
  redis_data:

networks:
  microservices-network:
    driver: bridge
